generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        String     @id @default(uuid())
  username  String     @unique
  phone     String     @unique
  email     String     @unique
  fullName  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  adminAuth AdminAuth?
}

model AdminAuth {
  id           String    @id @default(uuid())
  adminId      String    @unique
  password     String
  otp          String?
  otpExpiresAt DateTime?
  token        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  admin        Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Faculty {
  id            String   @id @default(uuid())
  name          String
  qualification String
  bio           String
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  video         Video[]
}

model Stream {
  id        String    @id @default(uuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  course    Course[]
  subject   Subject[]
  User      User[]
}

model Course {
  id        String    @id @default(uuid())
  name      String
  streamId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  stream    Stream?   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  subject   Subject[]

  @@unique([name, streamId])
}

model Subject {
  id                  String                @id @default(uuid())
  name                String                @unique
  year                Int[]
  country             String
  streamId            String
  courseId            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  chapters            Chapter[]
  course              Course?               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  stream              Stream                @relation(fields: [streamId], references: [id], onDelete: Cascade)
  userUnlockedSubject UserUnlockedSubject[]
}

model Chapter {
  id        String   @id @default(uuid())
  name      String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  topics    Topic[]

  @@unique([name, subjectId])
}

model Topic {
  id        String @id @default(uuid())
  name      String
  chapterId String

  bundle               Bundle[]
  flashCard            FlashCard[]
  mindMaps             MindMap[]
  question             Question[]
  chapter              Chapter                @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  video                Video[]
  relatedFrom          RelatedTopic[]         @relation("FromTopic")
  relatedTo            RelatedTopic[]         @relation("ToTopic")
  userCompletedContent UserCompletedContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, chapterId])
}

model RelatedTopic {
  id     String @id @default(uuid())
  fromId String
  toId   String

  from Topic @relation("FromTopic", fields: [fromId], references: [id], onDelete: Cascade)
  to   Topic @relation("ToTopic", fields: [toId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromId, toId])
  @@index([fromId])
  @@index([toId])
}

model MindMap {
  id          String   @id @default(uuid())
  mindMap     Json?
  topicId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  name        String
  topic       Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([name, topicId])
}

model Bundle {
  id          String      @id @default(uuid())
  name        String
  topicId     String
  type        ContentType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  description String?
  topic       Topic       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  flashCards  FlashCard[]
  questions   Question[]

  @@unique([name, topicId, type])
}

model Question {
  id          String @id @default(uuid())
  text        String
  topicId     String
  explanation String
  images      Json?

  bundleId        String?
  tags            String[]
  options         Option[]
  bundle          Bundle?           @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  topic           Topic             @relation(fields: [topicId], references: [id], onDelete: Cascade)
  userMCQResponse UserMCQResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id         String   @id @default(uuid())
  text       String
  isCorrect  Boolean
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model FlashCard {
  id        String   @id @default(uuid())
  question  String
  answer    String
  images    Json
  tags      String[]
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bundleId  String?
  Bundle    Bundle?  @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model FlashCardBundle {
  id          String   @id @default(uuid())
  name        String
  year        Int
  tags        String[]
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, year])
  @@index([year])
  @@index([tags])
}

model Video {
  id        String   @id @default(uuid())
  topicId   String?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  url       String
  facultyId String
  title     String
  faculty   Faculty  @relation(fields: [facultyId], references: [id])
  topic     Topic?   @relation(fields: [topicId], references: [id])
}

model User {
  id       String  @id @default(uuid())
  name     String?
  streamId String?
  phone    String  @unique
  year     Int?

  stream               Stream?                @relation(fields: [streamId], references: [id], onDelete: Cascade)
  userAuth             UserAuth?
  userUnlockedSubject  UserUnlockedSubject[]
  visitLog             VisitLog[]
  userUnlockedContent  UserUnlockedContent[]
  userCompletedContent UserCompletedContent[]
  userMCQResponse      UserMCQResponse[]

  coinTransaction CoinTransaction[]

  referralCode String  @unique @default(dbgenerated("substr(md5(random()::text), 1, 8)"))
  referredById String?
  referredBy   User?   @relation("UserReferrals", fields: [referredById], references: [id])
  referrals    User[]  @relation("UserReferrals")

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model UserAuth {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  otpSecret String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserUnlockedSubject {
  id         String   @id @default(uuid())
  userId     String
  subjectId  String
  unlockedAt DateTime @default(now())
  subject    Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subjectId])
  @@index([userId])
  @@index([subjectId])
}

model UserCompletedContent {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  resourceId         String
  resourceType       ContentType
  topicId            String
  topic              Topic       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  completePercentage Int         @default(0)

  completedAt DateTime @default(now())

  @@unique([userId, resourceType, resourceId])
  @@index([userId])
  @@index([resourceType, resourceId])
  @@index([topicId])
}

model VisitLog {
  id           String      @id @default(uuid())
  userId       String
  resourceId   String
  topicId      String
  resourceType ContentType
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  visitedAt DateTime @default(now())

  @@index([userId])
  @@index([resourceType, resourceId])
}

enum ContentType {
  MindMap
  MCQ
  FlashCard
  Video
}

/// Table to track unlocked content per user
model UserUnlockedContent {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  resourceId   String
  resourceType ContentType

  unlockedAt DateTime @default(now())

  @@unique([userId, resourceType, resourceId])
  @@index([userId])
  @@index([resourceType, resourceId])
}

model UserMCQResponse {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  tags       String[]
  isCorrect  Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionId])
  @@index([tags])
}

/// Enum to track source of coin gain
enum CoinSource {
  Reward
  Purchase
  Referral
  Recharge
}

/// Optimized Coin Transaction Log
model CoinTransaction {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Int // Positive for gain, negative for deduction
  source      CoinSource
  referenceId String? // Optional: ID of the related entity (like referralId, rewardId, etc)
  createdAt   DateTime   @default(now())

  @@index([userId])
  @@index([source])
}
