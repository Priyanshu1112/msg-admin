generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  phone     String   @unique
  email     String   @unique
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminAuth AdminAuth? @relation
}

model AdminAuth {
  id      String @id @default(uuid())
  adminId String @unique
  admin   Admin  @relation(fields: [adminId], references: [id], onDelete: Cascade)

  password     String // The hashed password for the admin
  otp          String? // OTP for verification
  otpExpiresAt DateTime? // Timestamp for OTP expiration

  // JWT Token or other auth-related fields (Optional)
  token     String? // The JWT token
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faculty {
  id            String  @id @default(uuid())
  name          String // e.g., "Dr. Farzana Thaseen"
  qualification String // e.g., "B.D.S. MFD(RCSI)"
  bio           String // e.g., full paragraph
  imageUrl      String? // optional profile picture URL
  video         Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id String @id @default(uuid())

  name String @unique

  course  Course[]
  subject Subject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Course {
  id String @id @default(uuid())

  name String

  stream   Stream? @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String?

  subject Subject[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure unique course names within a stream
  @@unique([name, streamId])
}

model Subject {
  id String @id @default(uuid())

  name String @unique

  chapters Chapter[]
  year     Int[]
  country  String

  stream   Stream  @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id String @id @default(uuid())

  name String

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  topics    Topic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸŽ¯ KEY CONSTRAINT: Unique chapter name within a subject
  @@unique([name, subjectId])
}

model Topic {
  id String @id @default(uuid())

  name String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  mindMaps  MindMap[]
  question  Question[]
  bundle    Bundle[]
  flashCard FlashCard[]
  video     Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸŽ¯ KEY CONSTRAINT: Unique topic name within a chapter
  @@unique([name, chapterId])
}

model MindMap {
  id String @id @default(uuid())

  mindMap     Json?
  name        String
  description String?

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, topicId])
}

enum BundleType {
  MindMap
  MCQ
  FlashCard
  Video
}

model Bundle {
  id          String      @id @default(uuid())
  name        String
  topicId     String
  topic       Topic       @relation(fields: [topicId], references: [id], onDelete: Cascade)
  questions   Question[]
  flashCards  FlashCard[]
  description String?

  type BundleType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, topicId, type])
}

model Question {
  id String @id @default(uuid())

  text    String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  options Option[]

  explanation String
  images      Json?
  tags        String[]

  bundle   Bundle? @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  bundleId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id String @id @default(uuid())

  text      String
  isCorrect Boolean

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FlashCard {
  id String @id @default(uuid())

  question String
  answer   String
  images   Json
  tags     String[]

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Bundle    Bundle?  @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  bundleId  String?
}

model FlashCardBundle {
  id          String   @id @default(uuid())
  name        String // Bundle name
  year        Int // Single year: 1, 2, 3, 4, or 5
  tags        String[] // Filter tags (e.g., ["anatomy", "important"])
  description String? // Optional description

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Unique constraint: same name cannot exist for same year
  @@unique([name, year])
  @@index([year])
  @@index([tags])
}

model Video {
  id String @id @default(uuid())

  title String

  url     String
  topic   Topic?  @relation(fields: [topicId], references: [id])
  topicId String?

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model User {
  id String @id @default(uuid())

  name     String?
  stream   Stream?    @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId String?
  phone    String    @unique
  year     Int?
  userAuth UserAuth?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model UserAuth {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  otpSecret String? // OTP for verification

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
